window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "CalendarCompiler", "modulename": "CalendarCompiler", "kind": "module", "doc": "<p>Main entry point for the SVG Calendar Generator project.</p>\n\n<p>Handles command-line arguments, settings, and orchestration of calendar output.</p>\n"}, {"fullname": "CalendarCompiler.CaseInsensitiveArgumentParser", "modulename": "CalendarCompiler", "qualname": "CaseInsensitiveArgumentParser", "kind": "class", "doc": "<p>ArgumentParser that supports case-insensitive command-line flags.</p>\n", "bases": "argparse.ArgumentParser"}, {"fullname": "CalendarCompiler.parse_cli_args", "modulename": "CalendarCompiler", "qualname": "parse_cli_args", "kind": "function", "doc": "<p>Parse CLI for SVG Calendar Generator.</p>\n\n<p>Only set a value if the user provides the flag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CalendarCompiler.update_settings_with_cli", "modulename": "CalendarCompiler", "qualname": "update_settings_with_cli", "kind": "function", "doc": "<p>Update include_days flags in settings from CLI if present.</p>\n\n<p>Supports nested international options for official/semi_official/fun flags.</p>\n\n<p>Args:\n    settings (dict): Config dict with 'include_days'.\n    args (argparse.Namespace): Parsed CLI args.</p>\n\n<p>Returns:\n    dict: Updated settings dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CalendarCompiler.generate_all_svgs", "modulename": "CalendarCompiler", "qualname": "generate_all_svgs", "kind": "function", "doc": "<p>Generate SVG calendar files for all twelve months using project settings.</p>\n\n<p>This function iterates over all months in the configured calendar year,\ngenerating an SVG calendar for each month using the specified output directory.\nThe output directory is determined from settings['output']['svg_dir'].\nHolidays are passed to each month for annotation.</p>\n\n<p>Args:\n    settings (dict): Project settings, including 'output' with 'svg_dir'.\n    holiday_data (dict): Holiday/event data to annotate in each month.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">holiday_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CalendarCompiler.load_event_data_from_options", "modulename": "CalendarCompiler", "qualname": "load_event_data_from_options", "kind": "function", "doc": "<p>Load and merge all holiday event data according to the provided settings.</p>\n\n<p>This function dynamically loads multiple holiday data layers based on the user's \nconfiguration, including international days, religious holidays (from cache/API), \nretro events, UK holidays, country lists, custom events, and variable rule-based dates.</p>\n\n<p>Args:\n    settings (dict): The loaded settings configuration.\n    year (int): The target year for the calendar build.</p>\n\n<p>Returns:\n    dict: Combined holiday data dictionary with merged events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">year</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CalendarCompiler.compile_calendar", "modulename": "CalendarCompiler", "qualname": "compile_calendar", "kind": "function", "doc": "<p>Compile the Calendar based on user options.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "CalendarCompiler.main", "modulename": "CalendarCompiler", "qualname": "main", "kind": "function", "doc": "<p>Entry point for generating the calendar output.</p>\n\n<p>This function processes command-line arguments, loads configuration settings,\nresolves and merges all holiday event data layers, and generates calendar outputs \nin various formats (PDF, PNG, JPG) based on user-defined options.</p>\n\n<p>Raises:\n    Exception: If Calendarific API data retrieval or parsing fails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules", "modulename": "modules", "kind": "module", "doc": "<p>Initialise the modules package.</p>\n"}, {"fullname": "modules.api_connectors", "modulename": "modules.api_connectors", "kind": "module", "doc": "<p>API connector utilities for retrieving holiday and calendar event data.</p>\n\n<p>Handles requests to external holiday APIs and formats results for calendar integration.</p>\n"}, {"fullname": "modules.api_connectors.fetch_calendarific_json", "modulename": "modules.api_connectors", "qualname": "fetch_calendarific_json", "kind": "function", "doc": "<p>Fetch religious holiday data from the Calendarific API for a given year and country.</p>\n\n<p>Args:\n    api_key (str): Your Calendarific API key.\n    year (int, optional): The target year for which holidays should be retrieved. Defaults to 2026.\n    country (str, optional): The 2-letter ISO country code (e.g., 'GB' for the United Kingdom). Defaults to 'GB'.</p>\n\n<p>Returns:\n    dict: Parsed JSON response from the Calendarific API containing holiday data.</p>\n\n<p>Raises:\n    requests.RequestException: If the HTTP request fails or times out.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2026</span>, </span><span class=\"param\"><span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s1\">&#39;GB&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.api_connectors.extract_multi_faith_holidays", "modulename": "modules.api_connectors", "qualname": "extract_multi_faith_holidays", "kind": "function", "doc": "<p>Extract and categorise religious holidays from Calendarific's JSON response by faith group.</p>\n\n<p>This function filters the raw Calendarific response to identify holidays with religious significance,\nusing keywords to infer the religion and assign each holiday a colour for calendar display purposes.</p>\n\n<p>Supported religions include:\n    - Jewish\n    - Christian (including Orthodox)\n    - Muslim/Islamic\n    - Hindu\n    - Buddhist</p>\n\n<p>Args:\n    raw_json (dict): The raw JSON dictionary returned by the Calendarific API.</p>\n\n<p>Returns:\n    dict: A dictionary where keys are ISO-formatted date strings (YYYY-MM-DD),\n          and values are dictionaries with \"label\" (event name) and \"colour\" (string colour code).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_json</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.api_connectors.extract_jewish_holidays_from_calendarific", "modulename": "modules.api_connectors", "qualname": "extract_jewish_holidays_from_calendarific", "kind": "function", "doc": "<p>Extract Jewish holidays from raw Calendarific JSON data.</p>\n\n<p>This function searches the Calendarific response for holidays\nthat are identified as Jewish based on their primary type,\ntype list, name, or description fields.</p>\n\n<p>Holidays are returned in a dictionary keyed by ISO date (YYYY-MM-DD),\neach containing a label and a fixed colour (\"#D28800\") for Jewish events.</p>\n\n<p>Args:\n    raw_json (dict): The raw JSON object returned from Calendarific API.</p>\n\n<p>Returns:\n    dict: A dictionary mapping date strings to holiday metadata.\n          Example:\n          {\n              \"2026-04-23\": {\"label\": \"Passover\", \"colour\": \"#D28800\"},\n              ...\n          }</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_json</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events", "modulename": "modules.calendar_events", "kind": "module", "doc": "<p>calendar_events.py - Module for retrieving and combining UK public holidays.</p>\n\n<p>This module uses the <code>holidays</code> package to fetch national and regional UK holidays\nfor a given year. It combines these into a single dictionary, noting overlaps\nand assigning different colours for each region.</p>\n"}, {"fullname": "modules.calendar_events.CONFIG_DIR", "modulename": "modules.calendar_events", "qualname": "CONFIG_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/jason/Library/Mobile Documents/com~apple~CloudDocs/SourceCode/Python/Calendar/modules/../config&#x27;"}, {"fullname": "modules.calendar_events.EVENT_TYPES", "modulename": "modules.calendar_events", "qualname": "EVENT_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;UK Public Holiday&#x27;: &#x27;red&#x27;, &#x27;French Public Holiday&#x27;: &#x27;blue&#x27;, &#x27;German Public Holiday&#x27;: &#x27;black&#x27;, &#x27;Religious Holiday&#x27;: &#x27;green&#x27;, &#x27;Retro Computing Event&#x27;: &#x27;purple&#x27;, &#x27;Custom Event&#x27;: &#x27;#D28800&#x27;}"}, {"fullname": "modules.calendar_events.COUNTRY_COLOURS", "modulename": "modules.calendar_events", "qualname": "COUNTRY_COLOURS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;GB&#x27;: &#x27;red&#x27;, &#x27;UK&#x27;: &#x27;red&#x27;, &#x27;IE&#x27;: &#x27;darkgreen&#x27;, &#x27;FR&#x27;: &#x27;blue&#x27;, &#x27;ES&#x27;: &#x27;coral&#x27;, &#x27;PT&#x27;: &#x27;mediumblue&#x27;, &#x27;BE&#x27;: &#x27;#AD9200&#x27;, &#x27;NL&#x27;: &#x27;#D28800&#x27;, &#x27;LU&#x27;: &#x27;lightblue&#x27;, &#x27;DE&#x27;: &#x27;black&#x27;, &#x27;AT&#x27;: &#x27;darkred&#x27;, &#x27;CH&#x27;: &#x27;darkmagenta&#x27;, &#x27;LI&#x27;: &#x27;slateblue&#x27;, &#x27;DK&#x27;: &#x27;firebrick&#x27;, &#x27;NO&#x27;: &#x27;navy&#x27;, &#x27;SE&#x27;: &#x27;mediumseagreen&#x27;, &#x27;FI&#x27;: &#x27;dodgerblue&#x27;, &#x27;IS&#x27;: &#x27;teal&#x27;, &#x27;PL&#x27;: &#x27;crimson&#x27;, &#x27;CZ&#x27;: &#x27;indigo&#x27;, &#x27;SK&#x27;: &#x27;slategray&#x27;, &#x27;HU&#x27;: &#x27;forestgreen&#x27;, &#x27;RU&#x27;: &#x27;maroon&#x27;, &#x27;UA&#x27;: &#x27;deepskyblue&#x27;, &#x27;RO&#x27;: &#x27;mediumvioletred&#x27;, &#x27;BG&#x27;: &#x27;mediumorchid&#x27;, &#x27;BY&#x27;: &#x27;saddlebrown&#x27;, &#x27;EE&#x27;: &#x27;deepskyblue&#x27;, &#x27;LV&#x27;: &#x27;peru&#x27;, &#x27;LT&#x27;: &#x27;yellowgreen&#x27;, &#x27;SI&#x27;: &#x27;darkolivegreen&#x27;, &#x27;HR&#x27;: &#x27;chocolate&#x27;, &#x27;RS&#x27;: &#x27;deeppink&#x27;, &#x27;ME&#x27;: &#x27;darkslategray&#x27;, &#x27;BA&#x27;: &#x27;turquoise&#x27;, &#x27;MK&#x27;: &#x27;slateblue&#x27;, &#x27;MD&#x27;: &#x27;mediumslateblue&#x27;, &#x27;AL&#x27;: &#x27;tomato&#x27;, &#x27;IT&#x27;: &#x27;darkgreen&#x27;, &#x27;GR&#x27;: &#x27;royalblue&#x27;, &#x27;MT&#x27;: &#x27;darksalmon&#x27;, &#x27;CY&#x27;: &#x27;darkorange&#x27;, &#x27;TR&#x27;: &#x27;darkred&#x27;, &#x27;US&#x27;: &#x27;blue&#x27;, &#x27;CA&#x27;: &#x27;firebrick&#x27;, &#x27;MX&#x27;: &#x27;green&#x27;, &#x27;JP&#x27;: &#x27;darkviolet&#x27;, &#x27;CN&#x27;: &#x27;red&#x27;, &#x27;IN&#x27;: &#x27;saddlebrown&#x27;, &#x27;AU&#x27;: &#x27;Blue&#x27;}"}, {"fullname": "modules.calendar_events.ISO_COUNTRY_NAMES", "modulename": "modules.calendar_events", "qualname": "ISO_COUNTRY_NAMES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;AL&#x27;: &#x27;\ud83c\udde6\ud83c\uddf1 Albania&#x27;, &#x27;AT&#x27;: &#x27;\ud83c\udde6\ud83c\uddf9 Austria&#x27;, &#x27;BA&#x27;: &#x27;\ud83c\udde7\ud83c\udde6 Bosnia and Herzegovina&#x27;, &#x27;BE&#x27;: &#x27;\ud83c\udde7\ud83c\uddea Belgium&#x27;, &#x27;BG&#x27;: &#x27;\ud83c\udde7\ud83c\uddec Bulgaria&#x27;, &#x27;BY&#x27;: &#x27;\ud83c\udde7\ud83c\uddfe Belarus&#x27;, &#x27;CA&#x27;: &#x27;\ud83c\udde8\ud83c\udde6 Canada&#x27;, &#x27;CH&#x27;: &#x27;\ud83c\udde8\ud83c\udded Switzerland&#x27;, &#x27;CN&#x27;: &#x27;\ud83c\udde8\ud83c\uddf3 China&#x27;, &#x27;CY&#x27;: &#x27;\ud83c\udde8\ud83c\uddfe Cyprus&#x27;, &#x27;CZ&#x27;: &#x27;\ud83c\udde8\ud83c\uddff Czechia&#x27;, &#x27;DE&#x27;: &#x27;\ud83c\udde9\ud83c\uddea Germany&#x27;, &#x27;DK&#x27;: &#x27;\ud83c\udde9\ud83c\uddf0 Denmark&#x27;, &#x27;EE&#x27;: &#x27;\ud83c\uddea\ud83c\uddea Estonia&#x27;, &#x27;ES&#x27;: &#x27;\ud83c\uddea\ud83c\uddf8 Spain&#x27;, &#x27;FI&#x27;: &#x27;\ud83c\uddeb\ud83c\uddee Finland&#x27;, &#x27;FR&#x27;: &#x27;\ud83c\uddeb\ud83c\uddf7 France&#x27;, &#x27;GB&#x27;: &#x27;\ud83c\uddec\ud83c\udde7 United Kingdom&#x27;, &#x27;GR&#x27;: &#x27;\ud83c\uddec\ud83c\uddf7 Greece&#x27;, &#x27;HR&#x27;: &#x27;\ud83c\udded\ud83c\uddf7 Croatia&#x27;, &#x27;HU&#x27;: &#x27;\ud83c\udded\ud83c\uddfa Hungary&#x27;, &#x27;IE&#x27;: &#x27;\ud83c\uddee\ud83c\uddea Ireland&#x27;, &#x27;IN&#x27;: &#x27;\ud83c\uddee\ud83c\uddf3 India&#x27;, &#x27;IS&#x27;: &#x27;\ud83c\uddee\ud83c\uddf8 Iceland&#x27;, &#x27;IT&#x27;: &#x27;\ud83c\uddee\ud83c\uddf9 Italy&#x27;, &#x27;JP&#x27;: &#x27;\ud83c\uddef\ud83c\uddf5 Japan&#x27;, &#x27;LI&#x27;: &#x27;\ud83c\uddf1\ud83c\uddee Liechtenstein&#x27;, &#x27;LT&#x27;: &#x27;\ud83c\uddf1\ud83c\uddf9 Lithuania&#x27;, &#x27;LU&#x27;: &#x27;\ud83c\uddf1\ud83c\uddfa Luxembourg&#x27;, &#x27;LV&#x27;: &#x27;\ud83c\uddf1\ud83c\uddfb Latvia&#x27;, &#x27;ME&#x27;: &#x27;\ud83c\uddf2\ud83c\uddea Montenegro&#x27;, &#x27;MK&#x27;: &#x27;\ud83c\uddf2\ud83c\uddf0 North Macedonia&#x27;, &#x27;MX&#x27;: &#x27;\ud83c\uddf2\ud83c\uddfd Mexico&#x27;, &#x27;NL&#x27;: &#x27;\ud83c\uddf3\ud83c\uddf1 Netherlands&#x27;, &#x27;NO&#x27;: &#x27;\ud83c\uddf3\ud83c\uddf4 Norway&#x27;, &#x27;PL&#x27;: &#x27;\ud83c\uddf5\ud83c\uddf1 Poland&#x27;, &#x27;PT&#x27;: &#x27;\ud83c\uddf5\ud83c\uddf9 Portugal&#x27;, &#x27;RO&#x27;: &#x27;\ud83c\uddf7\ud83c\uddf4 Romania&#x27;, &#x27;RS&#x27;: &#x27;\ud83c\uddf7\ud83c\uddf8 Serbia&#x27;, &#x27;RU&#x27;: &#x27;\ud83c\uddf7\ud83c\uddfa Russia&#x27;, &#x27;SE&#x27;: &#x27;\ud83c\uddf8\ud83c\uddea Sweden&#x27;, &#x27;SI&#x27;: &#x27;\ud83c\uddf8\ud83c\uddee Slovenia&#x27;, &#x27;SK&#x27;: &#x27;\ud83c\uddf8\ud83c\uddf0 Slovakia&#x27;, &#x27;TR&#x27;: &#x27;\ud83c\uddf9\ud83c\uddf7 Turkey&#x27;, &#x27;UA&#x27;: &#x27;\ud83c\uddfa\ud83c\udde6 Ukraine&#x27;, &#x27;US&#x27;: &#x27;\ud83c\uddfa\ud83c\uddf8 United States&#x27;, &#x27;AU&#x27;: &#x27;\ud83c\udde6\ud83c\uddfa Australia&#x27;}"}, {"fullname": "modules.calendar_events.aus_region_colours_raw", "modulename": "modules.calendar_events", "qualname": "aus_region_colours_raw", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;NATIONAL&#x27;: &#x27;#AD9200&#x27;, &#x27;NSW&#x27;: &#x27;darkblue&#x27;, &#x27;VIC&#x27;: &#x27;crimson&#x27;, &#x27;QLD&#x27;: &#x27;teal&#x27;, &#x27;SA&#x27;: &#x27;saddlebrown&#x27;, &#x27;WA&#x27;: &#x27;green&#x27;, &#x27;TAS&#x27;: &#x27;purple&#x27;, &#x27;NT&#x27;: &#x27;deepskyblue&#x27;, &#x27;ACT&#x27;: &#x27;#D28800&#x27;}"}, {"fullname": "modules.calendar_events.AUS_REGION_COLOURS", "modulename": "modules.calendar_events", "qualname": "AUS_REGION_COLOURS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{None: &#x27;#AD9200&#x27;, &#x27;NSW&#x27;: &#x27;darkblue&#x27;, &#x27;VIC&#x27;: &#x27;crimson&#x27;, &#x27;QLD&#x27;: &#x27;teal&#x27;, &#x27;SA&#x27;: &#x27;saddlebrown&#x27;, &#x27;WA&#x27;: &#x27;green&#x27;, &#x27;TAS&#x27;: &#x27;purple&#x27;, &#x27;NT&#x27;: &#x27;deepskyblue&#x27;, &#x27;ACT&#x27;: &#x27;#D28800&#x27;}"}, {"fullname": "modules.calendar_events.normalise_label", "modulename": "modules.calendar_events", "qualname": "normalise_label", "kind": "function", "doc": "<p>Clean redundant suffixes in label strings for stable deduplication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.canonicalise_holiday_data", "modulename": "modules.calendar_events", "qualname": "canonicalise_holiday_data", "kind": "function", "doc": "<p>Deduplicate identical label+colour entries for each date before merge phase.</p>\n\n<p>Args:\n    holiday_data (dict): Raw holiday data dictionary with potential redundant entries.</p>\n\n<p>Returns:\n    dict: Cleaned dictionary with duplicate entries removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">holiday_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.smart_merge_au_holidays", "modulename": "modules.calendar_events", "qualname": "smart_merge_au_holidays", "kind": "function", "doc": "<p>For each date, merge holidays with identical names, appending all region codes into the label.</p>\n\n<p>Args:\n    holiday_data (MultiColourHolidayDict): {date: {\"entries\": [{\"label\", \"colour\"}, ...]}}</p>\n\n<p>Returns:\n    MultiColourHolidayDict: With merged entries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">holiday_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.merge_identical_holidays", "modulename": "modules.calendar_events", "qualname": "merge_identical_holidays", "kind": "function", "doc": "<p>Merge holiday entries for each date when multiple countries share an identical holiday name.</p>\n\n<p>Fully harmonised: stable canonicalisation for merge keys, safe preservation of display labels,\nand correct handling of observed suffixes.</p>\n\n<p>Args:\n    holiday_data (dict): Dictionary in MultiColourHolidayDict format,\n                         {date: {\"entries\": [{\"label\": \"Name (CC)\", \"colour\": ...}, ...]}}\n    merge_enabled (bool): If False, does not alter input; if True, merges identical holidays.\n    default_colour (str): Colour to use for merged entries if not set per-country.</p>\n\n<p>Returns:\n    dict: Holiday data with merged entries where applicable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">holiday_data</span>, </span><span class=\"param\"><span class=\"n\">merge_enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">default_colour</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.get_multi_country_holidays", "modulename": "modules.calendar_events", "qualname": "get_multi_country_holidays", "kind": "function", "doc": "<p>Retrieve and combine holidays for multiple countries in a multi-entry format.</p>\n\n<p>Args:\n    settings (dict): Settings with 'holidays'/'countries' and 'year'.</p>\n\n<p>Returns:\n    MultiColourHolidayDict: {ISO date: {\"entries\": [ {\"label\", \"colour\"}, ... ]}}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.get_combined_holidays", "modulename": "modules.calendar_events", "qualname": "get_combined_holidays", "kind": "function", "doc": "<p>Return a unified holiday dictionary for the calendar engine.</p>\n\n<p>Combining UK region-colour-coded holidays, Australian state/territory holidays,\nand/or multi-country holidays as per config.</p>\n\n<p>Args:\n    settings (dict): Project settings.</p>\n\n<p>Returns:\n    MultiColourHolidayDict: Holidays ready for calendar rendering.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.get_au_combined_holidays", "modulename": "modules.calendar_events", "qualname": "get_au_combined_holidays", "kind": "function", "doc": "<p>Retrieve and combine Australian national and state/territory holidays for a given year.</p>\n\n<p>Holidays are grouped by date in ISO format (YYYY-MM-DD), with each date containing\none or more entries. Overlapping holidays from different Australian regions are merged\ninto the same day but retain their individual labels and colours.</p>\n\n<p>Region colours:\n    - \"#AD9200\"      = Australia (default/national)\n    - \"darkblue\"  = New South Wales (NSW)\n    - \"crimson\"   = Victoria (VIC)\n    - \"teal\"      = Queensland (QLD)\n    - \"saddlebrown\" = South Australia (SA)\n    - \"green\"     = Western Australia (WA)\n    - \"purple\"    = Tasmania (TAS)\n    - \"deepskyblue\" = Northern Territory (NT)\n    - \"#D28800\"    = Australian Capital Territory (ACT)</p>\n\n<p>Args:\n    year (int): The year to generate holidays for.</p>\n\n<p>Returns:\n    MultiColourHolidayDict: A dictionary of ISO date strings to lists of holiday entries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.get_uk_combined_holidays", "modulename": "modules.calendar_events", "qualname": "get_uk_combined_holidays", "kind": "function", "doc": "<p>Retrieve and combine UK national and regional holidays for a given year.</p>\n\n<p>in a unified multi-entry format compatible with the calendar rendering engine.</p>\n\n<p>Holidays are grouped by date in ISO format (YYYY-MM-DD), with each date containing\none or more entries. Overlapping holidays from different UK regions are merged\ninto the same day but retain their individual labels and colours.</p>\n\n<p>Region colours:\n    - \"red\"   = UK-wide (default)\n    - \"blue\"  = Scotland\n    - \"green\" = Northern Ireland\n    - \"#D28800\" = Wales</p>\n\n<p>Args:\n    year (int): The year to generate holidays for.</p>\n\n<p>Returns:\n    MultiColourHolidayDict: A dictionary of ISO date strings to lists of holiday entries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.nth_weekday_of_month", "modulename": "modules.calendar_events", "qualname": "nth_weekday_of_month", "kind": "function", "doc": "<p>Get the date of the nth weekday (0=Monday) of a given month/year.</p>\n\n<p>E.g., second Sunday in May = nth_weekday_of_month(2026, 5, 6, 2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span>, </span><span class=\"param\"><span class=\"n\">month</span>, </span><span class=\"param\"><span class=\"n\">weekday</span>, </span><span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.last_weekday_of_month", "modulename": "modules.calendar_events", "qualname": "last_weekday_of_month", "kind": "function", "doc": "<p>Get the date of the last weekday (0=Monday) of a given month/year.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span>, </span><span class=\"param\"><span class=\"n\">month</span>, </span><span class=\"param\"><span class=\"n\">weekday</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.calendar_events.add_variable_days", "modulename": "modules.calendar_events", "qualname": "add_variable_days", "kind": "function", "doc": "<p>Add variable/floating international and humorous days to the day_dict.</p>\n\n<p>Args:\n    year (int): The year for calculation.\n    day_dict (dict): The international_days dict to update.\nReturns:\n    dict: Updated day_dict.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span>, </span><span class=\"param\"><span class=\"n\">day_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader", "modulename": "modules.event_loader", "kind": "module", "doc": "<p>Module for loading various event datasets into the CalendarCompiler system.</p>\n\n<p>This module centralises the loading, merging, and management of multiple categories \nof holidays, observances, and events, including:</p>\n\n<ul>\n<li>International days (official, semi-official, fun)</li>\n<li>Religious holidays</li>\n<li>Retro computing anniversaries</li>\n<li>UK public holidays</li>\n<li>User-defined custom events</li>\n</ul>\n\n<p>Event data is expected to be stored in JSON format within the config/events directory.</p>\n\n<p>All loaders return a dictionary where keys are date strings (formatted MM-DD)\nand values are dictionaries containing holiday/event metadata such as labels and colours.</p>\n\n<p>Functions:\n    - resolve_config_path(): Build full file paths for event files.\n    - merge_holiday_dicts(): Merge multiple event dictionaries.\n    - load_international_events(): Load international events by category.\n    - load_religious_events(): Load religious holidays.\n    - load_retro_events(): Load retro computing anniversaries.\n    - load_uk_holidays(): Load UK public holidays.\n    - load_custom_events(): Load user-defined custom events.</p>\n\n<p>Author: Jason Brooks</p>\n"}, {"fullname": "modules.event_loader.load_international_events", "modulename": "modules.event_loader", "qualname": "load_international_events", "kind": "function", "doc": "<p>Load international events based on fine-grained config.</p>\n\n<p>Args:\n    intl_settings (dict): dict containing sub-keys official/semi_official/fun.</p>\n\n<p>Returns:\n    dict: Combined international holidays.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">intl_settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader.load_religious_events", "modulename": "modules.event_loader", "qualname": "load_religious_events", "kind": "function", "doc": "<p>Load religious holidays from the religious_days.json configuration file.</p>\n\n<p>Returns:\n    dict: A dictionary containing religious holiday data, where keys are date strings\n          in MM-DD format and values are dictionaries with holiday labels and colours.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader.load_retro_events", "modulename": "modules.event_loader", "qualname": "load_retro_events", "kind": "function", "doc": "<p>Load retro computing anniversaries and events from the retro_days.json configuration file.</p>\n\n<p>Returns:\n    dict: A dictionary containing retro event data, where keys are date strings\n          in MM-DD format and values are dictionaries with event labels and colours.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader.load_uk_events", "modulename": "modules.event_loader", "qualname": "load_uk_events", "kind": "function", "doc": "<p>Load UK-specific public holidays from the uk_holidays.json configuration file.</p>\n\n<p>Returns:\n    dict: A dictionary containing UK holiday data, where keys are date strings\n          in MM-DD format and values are dictionaries with holiday labels and colours.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader.load_custom_events", "modulename": "modules.event_loader", "qualname": "load_custom_events", "kind": "function", "doc": "<p>Load user-defined custom events from the custom_events.json configuration file.</p>\n\n<p>Returns:\n    dict: A dictionary containing custom event data, where keys are date strings\n          in MM-DD format and values are dictionaries with event labels and colours.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.event_loader.load_cultural_events", "modulename": "modules.event_loader", "qualname": "load_cultural_events", "kind": "function", "doc": "<p>Load cultural observance events for the given year from JSON file.</p>\n\n<p>This includes non-legal, folklore, seasonal, or minor observance events \nthat supplement official holidays. Cultural events may vary by country \nand are fully optional.</p>\n\n<p>The data source is located in <code>config/events/cultural_days.json</code> and \nuses the following format:</p>\n\n<p>{\n    \"RO\": {\n        \"02-24\": {\"label\": \"Dragobete (RO)\", \"colour\": \"mediumvioletred\"},\n        ...\n    },\n    \"ALL\": {\n        \"12-31\": {\"label\": \"New Year's Eve\", \"colour\": \"blue\"}\n    }\n}</p>\n\n<p>Args:\n    year (int): The calendar year being processed.</p>\n\n<p>Returns:\n    dict: Dictionary of cultural holiday data in MultiColourHolidayDict format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander", "modulename": "modules.export_calander", "kind": "module", "doc": "<p>Calendar export routines for SVG Calendar Generator.</p>\n\n<p>Handles assembly and output of compiled PDF (A4 landscape) \nfrom supplied artwork and SVG calendar pages.</p>\n"}, {"fullname": "modules.export_calander.ensure_dir_exists", "modulename": "modules.export_calander", "qualname": "ensure_dir_exists", "kind": "function", "doc": "<p>Ensure that the specified directory exists, creating it if necessary.</p>\n\n<p>Args:\n    path (str): Path to the directory to check/create.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.cleanup_temp_files", "modulename": "modules.export_calander", "qualname": "cleanup_temp_files", "kind": "function", "doc": "<p>Delete all files in <code>temp_files</code> and then attempt to remove <code>temp_dir</code>.</p>\n\n<p>Args:\n    temp_files (list): List of file paths to remove.\n    temp_dir (str): Path to directory to remove after files are deleted.\n    enable_cleanup (bool): Whether to actually perform cleanup.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temp_files</span>, </span><span class=\"param\"><span class=\"n\">temp_dir</span>, </span><span class=\"param\"><span class=\"n\">enable_cleanup</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.add_page_number", "modulename": "modules.export_calander", "qualname": "add_page_number", "kind": "function", "doc": "<p>Add a page number at the bottom centre of the PDF page.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_canvas</span>, </span><span class=\"param\"><span class=\"n\">page_width</span>, </span><span class=\"param\"><span class=\"n\">page_height</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.add_branding", "modulename": "modules.export_calander", "qualname": "add_branding", "kind": "function", "doc": "<p>Draw branding text at the bottom right corner of a PDF page.</p>\n\n<p>Args:\n    pdf_canvas (canvas.Canvas): ReportLab canvas object.\n    page_width (float): Width of the page in points.\n    page_height (float): Height of the page in points.\n    branding_text (str): The text to display for branding.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_canvas</span>, </span><span class=\"param\"><span class=\"n\">page_width</span>, </span><span class=\"param\"><span class=\"n\">page_height</span>, </span><span class=\"param\"><span class=\"n\">branding_text</span>, </span><span class=\"param\"><span class=\"n\">branding_url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.add_extras", "modulename": "modules.export_calander", "qualname": "add_extras", "kind": "function", "doc": "<p>Add additional information to the PDF.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_canvas</span>, </span><span class=\"param\"><span class=\"n\">page_width</span>, </span><span class=\"param\"><span class=\"n\">page_height</span>, </span><span class=\"param\"><span class=\"n\">branding_parms</span>, </span><span class=\"param\"><span class=\"n\">page_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.svg_to_png", "modulename": "modules.export_calander", "qualname": "svg_to_png", "kind": "function", "doc": "<p>Convert an SVG file to PNG format for embedding in PDF.</p>\n\n<p>Args:\n    svg_path (str): Path to the SVG file.\n    png_path (str): Output path for the PNG file.\n    output_width (int): Target width in pixels.\n    output_height (int): Target height in pixels.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">svg_path</span>, </span><span class=\"param\"><span class=\"n\">png_path</span>, </span><span class=\"param\"><span class=\"n\">output_width</span><span class=\"o\">=</span><span class=\"mi\">842</span>, </span><span class=\"param\"><span class=\"n\">output_height</span><span class=\"o\">=</span><span class=\"mi\">595</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.add_image_to_canvas", "modulename": "modules.export_calander", "qualname": "add_image_to_canvas", "kind": "function", "doc": "<p>Draw a scaled image (PNG/JPG) centred on the PDF page.</p>\n\n<p>Args:\n    pdf_canvas (canvas.Canvas): ReportLab canvas object.\n    image_path (str): Path to the image file.\n    page_width (float): Width of the PDF page.\n    page_height (float): Height of the PDF page.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pdf_canvas</span>, </span><span class=\"param\"><span class=\"n\">image_path</span>, </span><span class=\"param\"><span class=\"n\">page_width</span>, </span><span class=\"param\"><span class=\"n\">page_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.export_calendar_pdf", "modulename": "modules.export_calander", "qualname": "export_calendar_pdf", "kind": "function", "doc": "<p>Export a full calendar as a compiled PDF (A4 landscape) with art and calendar pages.</p>\n\n<p>Args:\n    settings (dict): Project settings, including 'art_files' and 'output'.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.export_calendar_pngs", "modulename": "modules.export_calander", "qualname": "export_calendar_pngs", "kind": "function", "doc": "<p>Export each calendar page and artwork as individual PNG files.</p>\n\n<p>Args:\n    settings (dict): Project settings, including 'art_files' and 'output'.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.export_calander.export_calendar_jpgs", "modulename": "modules.export_calander", "qualname": "export_calendar_jpgs", "kind": "function", "doc": "<p>Export each calendar page and artwork as individual JPG files.</p>\n\n<p>Args:\n    settings (dict): Project settings, including 'art_files' and 'output'.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers", "modulename": "modules.helpers", "kind": "module", "doc": "<p>Various helper functions covering basic I/O, Settings Retrieval, Merge Calendar Data Etc.</p>\n\n<p>and much more...</p>\n"}, {"fullname": "modules.helpers.get_api_key", "modulename": "modules.helpers", "qualname": "get_api_key", "kind": "function", "doc": "<p>Retrieve API key, trying (in order):.</p>\n\n<ol>\n<li>settings dict (lowercase key)</li>\n<li>.env file (ENV key, uppercase)</li>\n<li>OS environment variables (uppercase)</li>\n</ol>\n\n<p>Args:\n    settings (dict, optional): Settings dict, may contain the key.\n    keyname (str): Name of the key to look up (case-insensitive).\n    env_path (str): Path to .env file.</p>\n\n<p>Returns:\n    str: The API key value.</p>\n\n<p>Raises:\n    RuntimeError: If no API key is found by any method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">keyname</span><span class=\"o\">=</span><span class=\"s1\">&#39;MY_API_KEY&#39;</span>, </span><span class=\"param\"><span class=\"n\">env_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;.env&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.is_enabled", "modulename": "modules.helpers", "qualname": "is_enabled", "kind": "function", "doc": "<p>Check if a feature flag (e.g. 'uk_holidays') is enabled in settings['include_days'].</p>\n\n<p>Defaults to False if the section or key is missing.</p>\n\n<p>Args:\n    settings (dict): Settings dictionary.\n    key (str): Feature key to check.</p>\n\n<p>Returns:\n    bool: True if enabled, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.open_file_or_folder", "modulename": "modules.helpers", "qualname": "open_file_or_folder", "kind": "function", "doc": "<p>Open a file (PDF) or folder (image directory) with the system's default app/platform.</p>\n\n<p>Supports Windows, macOS, and Linux.</p>\n\n<p>Args:\n    path (str): The path to the file or directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.load_settings", "modulename": "modules.helpers", "qualname": "load_settings", "kind": "function", "doc": "<p>Load (and cache) configuration parameters from a JSON file.</p>\n\n<p>Args:\n    settings_path (str): Path to the JSON config file.\n    force_reload (bool): If True, re-read from disk even if cached.</p>\n\n<p>Returns:\n    dict: Parsed configuration dictionary.</p>\n\n<p>Raises:\n    FileNotFoundError: If the config file does not exist.\n    json.JSONDecodeError: If the file is not valid JSON.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;./config/settings.json&#39;</span>, </span><span class=\"param\"><span class=\"n\">force_reload</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.remap_null_keys", "modulename": "modules.helpers", "qualname": "remap_null_keys", "kind": "function", "doc": "<p>Convert specified string key in a dictionary to Python None key.</p>\n\n<p>Args:\n    data (dict): The dictionary to process.\n    null_key (str): The placeholder string representing None in JSON.</p>\n\n<p>Returns:\n    dict: Dictionary with specified key replaced by None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">null_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NATIONAL&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.save_json", "modulename": "modules.helpers", "qualname": "save_json", "kind": "function", "doc": "<p>Save Python data as a JSON file.</p>\n\n<p>Parameters:\n    data (dict or list): The data to serialize and write to file.\n    file_path (str): The full path (including filename) to save the JSON output.\n    pretty (bool): Whether to use indented formatting for readability. Defaults to True.</p>\n\n<p>Raises:\n    OSError: If the file cannot be written.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">pretty</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.load_json_cached", "modulename": "modules.helpers", "qualname": "load_json_cached", "kind": "function", "doc": "<p>Load data from a JSON file with internal caching to prevent redundant I/O.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.load_json", "modulename": "modules.helpers", "qualname": "load_json", "kind": "function", "doc": "<p>Load data from a JSON file.</p>\n\n<p>Parameters:\n    file_path (str): The full path to the JSON file to be loaded.</p>\n\n<p>Returns:\n    dict or list: The deserialized data from the JSON file.</p>\n\n<p>Raises:\n    FileNotFoundError: If the specified file does not exist.\n    json.JSONDecodeError: If the file is not valid JSON.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.merge_holiday_data", "modulename": "modules.helpers", "qualname": "merge_holiday_data", "kind": "function", "doc": "<p>Merge additional holiday data into the base dictionary.</p>\n\n<p>Deduplicates entries and ensures consistency across formats.</p>\n\n<p>Args:\n    base (MultiColourHolidayDict): Main holiday dataset (in-place modified).\n    additional (MultiColourHolidayDict): Additional data to merge in.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">additional</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">holiday_types</span><span class=\"o\">.</span><span class=\"n\">HolidayLine</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.wrap_text", "modulename": "modules.helpers", "qualname": "wrap_text", "kind": "function", "doc": "<p>Wrap a string into a list of lines, each with a maximum character count.</p>\n\n<p>Args:\n    text (str): The input string.\n    max_chars (int): Approximate number of characters per line.</p>\n\n<p>Returns:\n    List[str]: Wrapped lines.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">max_chars</span><span class=\"o\">=</span><span class=\"mi\">22</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.canonicalise_label", "modulename": "modules.helpers", "qualname": "canonicalise_label", "kind": "function", "doc": "<p>Convert a holiday or event label to a canonical (normalised) form for deduplication.</p>\n\n<p>Handles common abbreviation and variant cases, e.g. 'Saint' vs 'St', punctuation,\nand British/American English differences.</p>\n\n<p>Args:\n    label (str): The event or holiday label to normalise.</p>\n\n<p>Returns:\n    str: Canonicalised label string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.trim_calendar_grid", "modulename": "modules.helpers", "qualname": "trim_calendar_grid", "kind": "function", "doc": "<p>Trim trailing rows from a full 6x7 calendar grid if they contain only days outside the target month.</p>\n\n<p>Args:\n    grid (list): List of week rows, each a list of (year, month, day, is_current_month) tuples.\n    target_month (int): The integer month being displayed.</p>\n\n<p>Returns:\n    list: The trimmed grid with extraneous bottom rows removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span>, </span><span class=\"param\"><span class=\"n\">target_month</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.build_full_calendar_grid", "modulename": "modules.helpers", "qualname": "build_full_calendar_grid", "kind": "function", "doc": "<p>Generate a complete 6x7 calendar grid for a specified month.</p>\n\n<p>Including spillover days from the previous and next months, suitable for display \nin calendar layouts.</p>\n\n<p>This function constructs a two-dimensional list representing the calendar for the given\nmonth and year. Each cell contains a tuple with the year, month, day, and a boolean\nindicating whether the day belongs to the requested month. The grid always contains 6 rows\n(weeks) and 7 columns (days), ensuring a uniform structure for calendar rendering.\nDays that belong to the previous or next month are included to fill the grid and\nmay be styled differently in display logic.</p>\n\n<p>Args:\n    year (int): The calendar year (e.g., 2026).\n    month (int): The calendar month (1\u201312).\n    week_start (int, optional): The starting weekday for the calendar (0=Monday, 6=Sunday).\n        Defaults to 0 (Monday), which matches UK and ISO-8601 conventions.</p>\n\n<p>Returns:\n    list[list[tuple]]: A 6x7 list-of-lists structure.\n        Each inner list represents a week and contains 7 tuples of the form:\n            (cell_year, cell_month, cell_day, is_current_month)\n        - cell_year (int): The year of the date in the cell.\n        - cell_month (int): The month of the date in the cell.\n        - cell_day (int): The day of the month for the cell.\n        - is_current_month (bool): True if the cell belongs to the target month, \n        - False otherwise.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>build_full_calendar_grid(2026, 1, week_start=0)[0]\n          [(2025, 12, 29, False), (2025, 12, 30, False), (2025, 12, 31, False),\n           (2026, 1, 1, True), (2026, 1, 2, True), (2026, 1, 3, True), (2026, 1, 4, True)]</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span>, </span><span class=\"param\"><span class=\"n\">month</span>, </span><span class=\"param\"><span class=\"n\">week_start</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.export_holiday_validation_file", "modulename": "modules.helpers", "qualname": "export_holiday_validation_file", "kind": "function", "doc": "<p>Export the fully merged holiday data to a validation file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">holiday_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.update_year_key", "modulename": "modules.helpers", "qualname": "update_year_key", "kind": "function", "doc": "<p>Update MM-DD event dictionary to YYYY-MM-DD for a given year, skipping invalid dates.</p>\n\n<p>Args:\n    year (int): Target year for the events (e.g., 2027).\n    base (dict): Dictionary with 'MM-DD' keys and event info as values.</p>\n\n<p>Returns:\n    dict: New dictionary with valid 'YYYY-MM-DD' keys and event info as values.\n          Invalid dates (e.g., Feb 29 in non-leap years) are skipped.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span>, </span><span class=\"param\"><span class=\"n\">base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.resolve_config_path", "modulename": "modules.helpers", "qualname": "resolve_config_path", "kind": "function", "doc": "<p>Resolve full path to a file inside config/events directory.</p>\n\n<p>Args:\n    filename (str): Name of JSON file inside config/events.</p>\n\n<p>Returns:\n    str: Full absolute path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.helpers.merge_holiday_dicts", "modulename": "modules.helpers", "qualname": "merge_holiday_dicts", "kind": "function", "doc": "<p>Merge multiple holiday dictionaries into a single dictionary.</p>\n\n<p>Args:\n    *dicts: Variable number of dict arguments.</p>\n\n<p>Returns:\n    dict: Merged dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dicts</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.holiday_types", "modulename": "modules.holiday_types", "kind": "module", "doc": "<p>Typing for data used in the project.</p>\n\n<p>Update here for new types as needed.</p>\n"}, {"fullname": "modules.holiday_types.HolidayLine", "modulename": "modules.holiday_types", "qualname": "HolidayLine", "kind": "class", "doc": "<p>Simple data type for label and colour.</p>\n", "bases": "typing.TypedDict"}, {"fullname": "modules.holiday_types.HolidayLine.label", "modulename": "modules.holiday_types", "qualname": "HolidayLine.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "modules.holiday_types.HolidayLine.colour", "modulename": "modules.holiday_types", "qualname": "HolidayLine.colour", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "modules.holiday_types.MultiColourHolidayDict", "modulename": "modules.holiday_types", "qualname": "MultiColourHolidayDict", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Dict[str, typing.List[modules.holiday_types.HolidayLine]]"}, {"fullname": "modules.rules_loader", "modulename": "modules.rules_loader", "kind": "module", "doc": "<p>Responsible for loading variable event calculation rules from external rules.json.</p>\n\n<p>This allows country-specific configuration of rule-based holiday generation.</p>\n"}, {"fullname": "modules.rules_loader.load_variable_rules", "modulename": "modules.rules_loader", "qualname": "load_variable_rules", "kind": "function", "doc": "<p>Load country-specific variable holiday calculation rules from JSON file.</p>\n\n<p>Uses internal caching to avoid redundant file I/O on multiple calls.</p>\n\n<p>Returns:\n    dict: Dictionary mapping country codes to rule sets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.static_dates", "modulename": "modules.static_dates", "kind": "module", "doc": "<p>Key Calendar Dates to Add, extend here for custom events.</p>\n"}, {"fullname": "modules.static_dates.load_event_data", "modulename": "modules.static_dates", "qualname": "load_event_data", "kind": "function", "doc": "<p>Loader for external JSON event files.</p>\n\n<p>Args:\n    filename (str): Name of the JSON file inside the 'config' directory.</p>\n\n<p>Returns:\n    dict: Loaded dictionary of event data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.static_dates.custom_events", "modulename": "modules.static_dates", "qualname": "custom_events", "kind": "function", "doc": "<p>Return a dictionary of customer user dates.</p>\n\n<p>Returns:\n    dict: Dictionary where keys are date strings (YYYY-MM-DD) and values are dictionaries\n          with 'label' (event description) and 'colour' (display colour in calendar).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.static_dates.retroevents", "modulename": "modules.static_dates", "qualname": "retroevents", "kind": "function", "doc": "<p>Return a dictionary of significant dates in retro computing history.</p>\n\n<p>These include launch dates of classic home computers (e.g. ZX Spectrum, Commodore 64),\nsoftware milestones, and birthdays of influential figures in computing history \n(e.g. Clive Sinclair, Steve Wozniak).</p>\n\n<p>Returns:\n    dict: Dictionary where keys are date strings (YYYY-MM-DD) and values are dictionaries\n          with 'label' (event description) and 'colour' (display colour in calendar).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.static_dates.merge_holiday_dicts", "modulename": "modules.static_dates", "qualname": "merge_holiday_dicts", "kind": "function", "doc": "<p>Merge multiple holiday dictionaries into a single dictionary.</p>\n\n<p>Later dicts overwrite earlier dicts on key conflict.</p>\n\n<p>Args:\n    *dicts: Variable number of dict arguments.</p>\n\n<p>Returns:\n    dict: Merged dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">dicts</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.static_dates.international_dates", "modulename": "modules.static_dates", "qualname": "international_dates", "kind": "function", "doc": "<p>Load and combine holiday event data based on user selection.</p>\n\n<p>Args:\n    include_official (bool): Include official UN/WHO days.\n    include_semi (bool): Include regional/country semi-official days.\n    include_fun (bool): Include fun &amp; pop culture days.</p>\n\n<p>Returns:\n    dict: Combined holiday data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">include_official</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_semi</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_fun</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.svg_calendar", "modulename": "modules.svg_calendar", "kind": "module", "doc": "<p>SVG Generation Module to create the basic calendar outline.</p>\n"}, {"fullname": "modules.svg_calendar.escape_xml", "modulename": "modules.svg_calendar", "qualname": "escape_xml", "kind": "function", "doc": "<p>Escape &amp;, &lt;, &gt;, ', and \" for XML.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.svg_calendar.generate_svg_calendar", "modulename": "modules.svg_calendar", "qualname": "generate_svg_calendar", "kind": "function", "doc": "<p>Generate an A4 landscape SVG calendar for a given month and year.</p>\n\n<p>This function creates a visual calendar in SVG format with weekday headers, \nnumbered day boxes, and optional holiday/event annotations. It supports \nhighlighting specific days using a <code>holidays</code> dictionary keyed by ISO date strings.</p>\n\n<p>The output file is saved to the specified output directory using the filename \npattern 'CalYYYYMM.svg'.</p>\n\n<p>Parameters:\n    year (int): The calendar year (e.g., 2026).\n    month (int): The calendar month (1\u201312).\n    output_dir (str, optional): Directory to save the SVG file. Defaults to 'calendars'.\n    holidays (dict, optional): A dictionary of holiday events keyed by ISO date strings \n        (e.g., '2026-03-17'), where each value is a dict with:\n        - 'label': str \u2013 Displayed label for the event (can include newlines).\n        - 'colour': str \u2013 Optional text colour (e.g., 'blue', 'red'). Defaults to black.</p>\n\n<p>Returns:\n    None. Outputs an SVG file to disk and prints the file path upon success.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;calendars&#39;</span>, </span><span class=\"param\"><span class=\"n\">holidays</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.svg_calendar.generate_legend_svg", "modulename": "modules.svg_calendar", "qualname": "generate_legend_svg", "kind": "function", "doc": "<p>Generate a multi-column SVG legend/key showing country colours, event types, border, and branding.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">country_colours</span>,</span><span class=\"param\">\t<span class=\"n\">event_types</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span>,</span><span class=\"param\">\t<span class=\"n\">num_cols</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">branding_text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Generated by Calendar Compiler | https://github.com/muckypaws/CalendarCompiler&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events", "modulename": "modules.variable_events", "kind": "module", "doc": "<p>Module for calculating rule-based dynamic holidays using country-driven rules.</p>\n\n<p>Supports civil holiday rules (e.g. Mother's Day, Father's Day, Yorkshire Pudding Day)\nand Christian moveable feasts (e.g. Easter, Pentecost, Advent).</p>\n\n<p>Author: Jason Brooks</p>\n"}, {"fullname": "modules.variable_events.calculate_orthodox_easter", "modulename": "modules.variable_events", "qualname": "calculate_orthodox_easter", "kind": "function", "doc": "<p>Calculate Orthodox Easter Sunday for a given year.</p>\n\n<p>Uses the Meeus Julian algorithm with Gregorian correction to compute the \nOrthodox Easter date observed in Eastern Orthodox churches.</p>\n\n<p>Args:\n    year (int): The year to calculate for.</p>\n\n<p>Returns:\n    date: The date of Orthodox Easter Sunday.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_florii", "modulename": "modules.variable_events", "qualname": "calculate_florii", "kind": "function", "doc": "<p>Calculate Florii (Romanian Flowers Day) for the given year.</p>\n\n<p>Florii occurs on Orthodox Palm Sunday, exactly one week before Orthodox Easter.</p>\n\n<p>Args:\n    year (int): The year to calculate Florii for.</p>\n\n<p>Returns:\n    dict: Dictionary containing Florii keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_volkstrauertag", "modulename": "modules.variable_events", "qualname": "calculate_volkstrauertag", "kind": "function", "doc": "<p>Calculate German Volkstrauertag (National Day of Mourning).</p>\n\n<p>Occurs two Sundays before Advent (Advent = 4 Sundays before Christmas).</p>\n\n<p>Args:\n    year (int): The year to calculate Volkstrauertag for.</p>\n\n<p>Returns:\n    dict: Dictionary containing Volkstrauertag keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_remembrance_sunday", "modulename": "modules.variable_events", "qualname": "calculate_remembrance_sunday", "kind": "function", "doc": "<p>Calculate Remembrance Sunday (second Sunday of November).</p>\n\n<p>Args:\n    year (int): The year to calculate Remembrance Sunday for.</p>\n\n<p>Returns:\n    dict: Dictionary containing Remembrance Sunday keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_mothers_day", "modulename": "modules.variable_events", "qualname": "calculate_mothers_day", "kind": "function", "doc": "<p>Calculate Mother's Day according to country-specific rule.</p>\n\n<p>Args:\n    year (int): The year to calculate for.\n    rule (str): Rule identifier (e.g. 'mothering_sunday', 'second_sunday_may').</p>\n\n<p>Returns:\n    dict: Dictionary containing Mother's Day keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_fathers_day", "modulename": "modules.variable_events", "qualname": "calculate_fathers_day", "kind": "function", "doc": "<p>Calculate Father's Day according to country-specific rule.</p>\n\n<p>Args:\n    year (int): The year to calculate for.\n    rule (str): Rule identifier (e.g. 'third_sunday_june', 'first_sunday_september').</p>\n\n<p>Returns:\n    dict: Dictionary containing Father's Day keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_yorkshire_pudding_day", "modulename": "modules.variable_events", "qualname": "calculate_yorkshire_pudding_day", "kind": "function", "doc": "<p>Calculate Yorkshire Pudding Day.</p>\n\n<p>Args:\n    year (int): The year to calculate for.\n    rule (str): Rule identifier (e.g. 'first_sunday_february').</p>\n\n<p>Returns:\n    dict: Dictionary containing Yorkshire Pudding Day keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.calculate_easter_date", "modulename": "modules.variable_events", "qualname": "calculate_easter_date", "kind": "function", "doc": "<p>Calculate Western Easter Sunday (Gregorian) for a given year.</p>\n\n<p>Uses Meeus/Jones/Butcher Gregorian algorithm.</p>\n\n<p>Args:\n    year (int): The year to calculate for.</p>\n\n<p>Returns:\n    date: Western Easter date.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.build_christian_events", "modulename": "modules.variable_events", "qualname": "build_christian_events", "kind": "function", "doc": "<p>Generate rule-based Christian feasts for the given year.</p>\n\n<p>Includes Ash Wednesday, Good Friday, Easter Sunday, Ascension Day,\nPentecost Sunday, and Advent Sundays.</p>\n\n<p>Args:\n    year (int): The year to calculate feasts for.</p>\n\n<p>Returns:\n    dict: Dictionary of Christian events keyed by MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "modules.variable_events.build_variable_event_dataset", "modulename": "modules.variable_events", "qualname": "build_variable_event_dataset", "kind": "function", "doc": "<p>Build full variable event dataset combining civil, Christian, and cultural holidays.</p>\n\n<p>Args:\n    year (int): The year to calculate events for.\n    country_code (str): ISO 2-letter country code.</p>\n\n<p>Returns:\n    dict: Dictionary of calculated holidays keyed by YYYY-MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">country_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GB&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();